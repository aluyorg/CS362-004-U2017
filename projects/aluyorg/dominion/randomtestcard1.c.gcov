File 'randomtestcard1.c'
Lines executed:90.29% of 103
Branches executed:100.00% of 48
Taken at least once:85.42% of 48
Calls executed:89.58% of 48
Creating 'randomtestcard1.c.gcov'

        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * -----------------------------------------------------------------------
        -:    3: * -----------------------------------------------------------------------
        -:    4: *-----------------------------------------------------------------------
        -:    5: * -----------------------------------------------------------------------
        -:    6: * -----------------------------------------------------------------------
        -:    7: * -----------------------------------------------------------------------
        -:    8: * -----------------------------------------------------------------------
        -:    9: * -----------------------------------------------------------------------
        -:   10: * ------------------------------------------------------------------------
        -:   11: * -----------------------------------------------------------------------
        -:   12: * -----------------------------------------------------------------------
        -:   13: * -----------------------------------------------------------------------
        -:   14: * -----------------------------------------------------------------------
        -:   15: *-----------------------------------------------------------------------
        -:   16: * -----------------------------------------------------------------------
        -:   17: * -----------------------------------------------------------------------
        -:   18: */
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include <string.h>
        -:   22:#include <stdio.h>
        -:   23:#include <assert.h>
        -:   24:#include "rngs.h"
        -:   25:#include <stdlib.h>
        -:   26:#include <time.h>
        -:   27:#include <math.h>
        -:   28:#include <stdbool.h>
        -:   29:
        -:   30:#define TEST_RUNS 1000
        -:   31:
function main called 1 returned 100% blocks executed 90%
        1:   32:int main() {
        -:   33:    int i, j, r, z;
        -:   34:    int numPlayer;
        1:   35:    int bugCount = 0;
        1:   36:    int flag = 0; // flag for other player piles
        -:   37:	struct gameState G, prevG;
        1:   38:	int seed = 1000;
        1:   39:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   40:	int k[10]; // for kingdom cards
        -:   41:	int numKingdomCards;
        -:   42:	bool haveCard;
        -:   43:	int numDraw;
        1:   44:	int pass = 0; // track the number of passes
        1:   45:	int fail = 0; // track the number of fails
        -:   46:
        1:   47:	printf("------------------------------------------\n");		
call    0 returned 100%
        1:   48:	printf(" Testing Random Test Generator for Smithy\n");
call    0 returned 100%
        1:   49:	printf("------------------------------------------\n");	
call    0 returned 100%
        -:   50:    
     1001:   51:	for(z = 1; z <= TEST_RUNS; z++) // test for loop
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   52:	{
        -:   53:		// random kingdom cards set (9 random with smithy card)
     1000:   54:		numKingdomCards = 0;
    15377:   55:		while(numKingdomCards < 10)
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:   56:		{
    13377:   57:			haveCard = false;
    13377:   58:			r = (rand() % 20 + 7); // gets a random kingdom card
call    0 returned 100%
        -:   59:			
        -:   60:			// check if already have card in kingdom set k
    81077:   61:			for(i = 0; i < numKingdomCards; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
    67700:   62:				if(k[i] == r)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
     3377:   63:					haveCard = true;
        -:   64:			
        -:   65:			// if we don't have it, add it to k set and increment the numKingdomCards
    13377:   66:			if(!haveCard)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   67:			{
    10000:   68:				k[numKingdomCards] = r;
    10000:   69:				numKingdomCards++;
        -:   70:			}
        -:   71:		}
        -:   72:		// now with random set, we have to make sure smithy card is in the kingdom pile
        -:   73:		// if not we'll randomly replace one of the 10 kindgom cards with an smithy.
     1000:   74:		haveCard = false;
        -:   75:		// check 10 kingdom pile for smithy
    11000:   76:		for(i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   77:		{
    10000:   78:			if(k[i] == smithy)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:   79:			{
      483:   80:				haveCard = true;
        -:   81:			}
        -:   82:		}
        -:   83:		// no smithy found, have to randomly add it.
     1000:   84:		if(!haveCard)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -:   85:		{
      517:   86:			r = (rand() % 10); // random position
call    0 returned 100%
      517:   87:			k[r] = smithy;
        -:   88:		}
        -:   89:		
        -:   90:		// random number of players from 2 to 5
     1000:   91:		numPlayer = ((rand() % 3) + 2);
call    0 returned 100%
        -:   92:		
     1000:   93:		printf("--------------------------------\n");
call    0 returned 100%
     1000:   94:		printf(" Starting Test #%d for Smithy\n", z);
call    0 returned 100%
     1000:   95:		printf("--------------------------------\n");
call    0 returned 100%
        -:   96:		
     1000:   97:		memset(&G, 23, sizeof(struct gameState));   // clear the game state
     1000:   98:		initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:   99:		
        -:  100:		// set random deck count for each player
     4035:  101:		for(i = 0; i < numPlayer; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     3035:  102:			G.deckCount[i] = (rand() % (MAX_DECK/numPlayer));
call    0 returned 100%
        -:  103:		
        -:  104:		// fill each players' decks with random cards
     4035:  105:		for(i = 0; i < numPlayer; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  106:		{
   251136:  107:			for(j = 0; j < G.deckCount[i]; j++) 
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  108:			{
   248101:  109:				r = rand() % 3;
call    0 returned 100%
   248101:  110:				switch(r) 
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
branch  3 taken 0%
        -:  111:				{
    82589:  112:					case 0: G.deck[i][j] = (rand() % 4); // victory card 
call    0 returned 100%
    82589:  113:						break;
    82467:  114:					case 1: G.deck[i][j] = (rand() % 3) + 4; // treasuer card 
call    0 returned 100%
    82467:  115:						break;
    83045:  116:					case 2: G.deck[i][j] = k[(rand() % 10)]; // kingdom card 
call    0 returned 100%
    83045:  117:						break;
        -:  118:				}
        -:  119:			}
        -:  120:		}
        -:  121:		
        -:  122:		// initialize counters
     1000:  123:		bugCount = 0;
        -:  124:		
     1000:  125:		memcpy(&prevG, &G, sizeof(struct gameState)); //create clone of game state to run tests on
     1000:  126:		smithy_func(G.handCount[0],&G);
call    0 returned 100%
        -:  127:		
        -:  128:		/* tried cardEffect instead of my refactored function
        -:  129:		int handPos, choice1, choice2, choice3, bonus;
        -:  130:		choice1 = choice2 = choice3 = bonus = 0;
        -:  131:		
        -:  132:		// find hand position of smithy card
        -:  133:		for(i = 0; i < G.handCount[0]; i++)
        -:  134:		{
        -:  135:			if(G.hand[0][i] == smithy)
        -:  136:			{
        -:  137:				handPos = i;
        -:  138:			}
        -:  139:		}
        -:  140:		
        -:  141:		cardEffect(smithy, choice1, choice2, choice3, &G, handPos, &bonus);
        -:  142:		*/
        -:  143:		// printf("Deck Count: %d\n", G.deckCount[0]);
        -:  144:		/* check that deck, discard, hand contents are random
        -:  145:		printf("Deck Contents\n");
        -:  146:		for(i = 0; i < G.deckCount[0]; i++)
        -:  147:			printf("Position %d, Card: %d\n", i, G.deck[0][i]);
        -:  148:		
        -:  149:		printf("Discard Contents\n");
        -:  150:		for(i = 0; i < G.discardCount[0]; i++)
        -:  151:			printf("Position %d, Card: %d\n", i, G.discard[0][i]);
        -:  152:
        -:  153:		printf("Hand Contents\n");
        -:  154:		for(i = 0; i < G.handCount[0]; i++)
        -:  155:			printf("Position %d, Card: %d\n", i, G.hand[0][i]);
        -:  156:		*/
        -:  157:		
     1000:  158:		printf("Deck Count before Smithy: %d\n", prevG.deckCount[0]);
call    0 returned 100%
     1000:  159:		printf("Deck Count after Smithy: %d\n", G.deckCount[0]);
call    0 returned 100%
        -:  160:		
        -:  161:		// if there are less than 3 cards, smithy can only draw what is available
        -:  162:		// figure out how much should be drawn
     1000:  163:		numDraw = 3;
        -:  164:		
     1000:  165:		if (prevG.deckCount[0] < 3)		
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       16:  166:			numDraw = prevG.deckCount[0] - G.deckCount[0];
        -:  167:		
        -:  168:		// check if hand count correct after Smithy 
     1000:  169:		printf("\nChecking hand count is correct after using refactored Smithy.\n");
call    0 returned 100%
     1000:  170:		printf("Previous hand count: %d, After Smithy: %d\n", prevG.handCount[0], G.handCount[0]);
call    0 returned 100%
     1000:  171:		printf("Expected hand count after Smithy: %d\n", (prevG.handCount[0] + numDraw - 1));
call    0 returned 100%
     1000:  172:		if((prevG.handCount[0] + numDraw - 1) != G.handCount[0]){
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
      977:  173:			printf("Bug!!! Ended with the incorrect number of cards in hand after Smithy.\n");
call    0 returned 100%
      977:  174:			bugCount++;
        -:  175:		}
        -:  176:		else
       23:  177:			printf("Great! Ended with the correct number of cards in hand after Smithy.\n");
call    0 returned 100%
        -:  178:
        -:  179:		// check if Smithy drew the correct cards from deck
     1000:  180:		printf("\nChecking if refactored Smithy drew enough cards to hand.\n");
call    0 returned 100%
     1000:  181:		printf("Previous deck count: %d, After Smithy: %d\n", prevG.deckCount[0], G.deckCount[0]);
call    0 returned 100%
     1000:  182:		printf("Smithy drew: %d cards. Expected to draw %d cards.\n", (prevG.deckCount[0] - G.deckCount[0]), numDraw);
call    0 returned 100%
     1000:  183:		if((prevG.deckCount[0] - G.deckCount[0]) != numDraw){
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
      977:  184:			printf("Bug!!! Smithy didn't draw correct nunmber of cards from the deck.\n");
call    0 returned 100%
      977:  185:			bugCount++;
        -:  186:		}
        -:  187:		else
       23:  188:			printf("Great! Smithy drew correct number of cards from deck.\n");
call    0 returned 100%
        -:  189:
        -:  190:		// check if smithy altered other player's cards
     1000:  191:		printf("\nChecking if refactored Smithy altered other player's hand.\n");
call    0 returned 100%
     1000:  192:		if(prevG.handCount[1] != G.handCount[1]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  193:			printf("Bug!!! Smithy altered other player's cards\n");
call    0 never executed
    #####:  194:			bugCount++;
        -:  195:		}
     1000:  196:		else if(prevG.deckCount[1] != G.deckCount[1]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  197:			printf("Bug!!! Smithy altered other player's cards\n");
call    0 never executed
    #####:  198:			bugCount++;
        -:  199:		}
     1000:  200:		else if(prevG.discardCount[1] != G.discardCount[1]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  201:			printf("Bug!!! Smithy altered other player's cards\n");
call    0 never executed
    #####:  202:			bugCount++;
        -:  203:		}
        -:  204:		else
     1000:  205:			printf("Great! Smithy didn't alter other player's cards.\n");
call    0 returned 100%
        -:  206:		
        -:  207:		// check if Smithy altered the victory and kingdom piles
     1000:  208:		printf("\nChecking if refactored Smithy altered the Victory and Kingdom piles.\n");
call    0 returned 100%
     1000:  209:		int arraySize = sizeof(G.supplyCount) / sizeof(int);
    28000:  210:		for(i = 0; i < arraySize; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    27000:  211:			if(G.supplyCount[i] != prevG.supplyCount[i]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:				flag = 1;
        -:  213:			}
        -:  214:		}
     1000:  215:		if(flag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1000:  216:			printf("Great! Smithy didn't alter the Victory and Kingdom piles.\n");
call    0 returned 100%
        -:  217:		else
        -:  218:		{
    #####:  219:			printf("Bug!!! Kingdom/Victory supplied have been altered\n");
call    0 never executed
    #####:  220:			bugCount++;
        -:  221:		}
        -:  222:
        -:  223:		// output the test results overall
     1000:  224:		printf("------------------------------------------\n");
call    0 returned 100%
     1000:  225:		printf(" Test #%d results for Smithy\n", z);
call    0 returned 100%
     1000:  226:		printf("------------------------------------------\n");
call    0 returned 100%
        -:  227:
     1000:  228:		if(bugCount == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  229:		{
       23:  230:			printf("All tests passed for the Smithy!\n\n");
call    0 returned 100%
       23:  231:			pass++;
        -:  232:		}
        -:  233:		else
        -:  234:		{
      977:  235:			printf("Smithy failed for %d condition(s), check above for which ones.\n\n", bugCount);
call    0 returned 100%
      977:  236:			fail++;
        -:  237:		}
        -:  238:		
        -:  239:		/* checking deck, discard, hand contents
        -:  240:		printf("Deck Contents\n");
        -:  241:		for(i = 0; i < G.deckCount[0]; i++)
        -:  242:			printf("Position %d, Card: %d\n", i, G.deck[0][i]);
        -:  243:		
        -:  244:		printf("Discard Contents\n");
        -:  245:		for(i = 0; i < G.discardCount[0]; i++)
        -:  246:			printf("Position %d, Card: %d\n", i, G.discard[0][i]);
        -:  247:
        -:  248:		printf("Hand Contents\n");
        -:  249:		for(i = 0; i < G.handCount[0]; i++)
        -:  250:			printf("Position %d, Card: %d\n", i, G.hand[0][i]);
        -:  251:		*/
        -:  252:		
        -:  253:	}
        -:  254:	
        -:  255:	// output the final test results overall
        1:  256:	printf("---------------------------------------------------\n");
call    0 returned 100%
        1:  257:	printf(" Final Testing results for Smithy\n");
call    0 returned 100%
        1:  258:	printf("---------------------------------------------------\n");
call    0 returned 100%
        -:  259:
        1:  260:	if(fail == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  261:		printf("All tests passed for the Smithy! Amazing!\n\n");
call    0 never executed
        -:  262:	else
        1:  263:		printf("Smithy passed %d tests and failed %d tests, check above for which ones.\n\n", pass, fail);
call    0 returned 100%
        -:  264:		
        1:  265:	return 0;
        -:  266:}
File 'dominion.c'
Lines executed:34.99% of 563
Branches executed:39.57% of 417
Taken at least once:24.46% of 417
Calls executed:29.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:72
        -:    0:Programs:35
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1921380 returned 100% blocks executed 83%
  1921380:    8:int compare(const void* a, const void* b) {
  1921380:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
  1921380:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
   512368:   12:    return -1;
  1409012:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 42629 returned 100% blocks executed 95%
    42629:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    42629:   44:  SelectStream(1);
call    0 returned 100%
    42629:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    42629:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    42629:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   468919:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
  4689190:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
  4262900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    42629:   73:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   74:    {
    14102:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    28527:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
    14220:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    14307:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    42629:   87:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   88:    {
    14102:   89:      state->supplyCount[estate] = 8;
    14102:   90:      state->supplyCount[duchy] = 8;
    14102:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    28527:   95:      state->supplyCount[estate] = 12;
    28527:   96:      state->supplyCount[duchy] = 12;
    28527:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    42629:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    42629:  102:  state->supplyCount[silver] = 40;
    42629:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   895209:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  7033785:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  6607495:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   426290:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:  114:		{
    80146:  115:		  if (numPlayers == 2){ 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    13145:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    26928:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   386217:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   426290:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  6181205:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   170721:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
   128092:  140:      state->deckCount[i] = 0;
   512368:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
   384276:  143:	  state->deck[i][j] = estate;
   384276:  144:	  state->deckCount[i]++;
        -:  145:	}
  1024736:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   896644:  148:	  state->deck[i][j] = copper;
   896644:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   170721:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
   128092:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   170721:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   128092:  166:      state->handCount[i] = 0;
   128092:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1193612:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
  1150983:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    42629:  182:  state->outpostPlayed = 0;
    42629:  183:  state->phase = 0;
    42629:  184:  state->numActions = 1;
    42629:  185:  state->numBuys = 1;
    42629:  186:  state->playedCardCount = 0;
    42629:  187:  state->whoseTurn = 0;
    42629:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   255774:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   213145:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
    42629:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
    42629:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 140704 returned 100% blocks executed 100%
   140704:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   140704:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   140704:  209:  if (state->deckCount[player] < 1)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
    12612:  210:    return -1;
   128092:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1537104:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  1280920:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  1280920:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1280920:  217:    newDeckPos++;
  4475240:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
  3194320:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1280920:  221:    state->deckCount[player]--;
        -:  222:  }
  1409012:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  1280920:  224:    state->deck[player][i] = newDeck[i];
  1280920:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   128092:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 13 returned 100% blocks executed 100%
       13:  320:int supplyCount(int card, struct gameState *state) {
       13:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 42637 returned 100% blocks executed 100%
    42637:  346:int whoseTurn(struct gameState *state) {
    42637:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 377779 returned 100% blocks executed 85%
   377779:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   377779:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     6840:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     6840:  538:    state->deckCount[player] = state->discardCount[player];
     6840:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6840:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6840:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6840:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6840:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6840:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     6840:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   370939:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   370939:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   370939:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   370939:  576:    state->deckCount[player]--;
   370939:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   370939:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 4 returned 100% blocks executed 10%
        4:  583:int getCost(int cardNumber)
        -:  584:{
        4:  585:  switch( cardNumber ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        4:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// Assignment 2 - refactor card #1: Adventurer
function adventurer_func called 10629 returned 100% blocks executed 100%
    10629:  647:int adventurer_func(struct gameState *state)
        -:  648:{
        -:  649:	int cardDrawn;
    10629:  650:	int currentPlayer = whoseTurn(state);	
call    0 returned 100%
    10629:  651:	int drawntreasure = 0;
        -:  652:	int temphand[MAX_HAND];// moved above the if statement
    10629:  653:	int z = 0;// this is the counter for the temp hand
        -:  654:    
   105871:  655:	while(drawntreasure <= 2) // BUG added!! - Changed to < to <= that what it could end up drawing extra treasure.
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:  656:	{
        -:  657:		//if the deck is empty we need to shuffle discard and add to deck
    84613:  658:		if (state->deckCount[currentPlayer] <1)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
     5772:  659:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  660:		
    84613:  661:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  662:		
        -:  663:			//top card of hand is most recently drawn card.
    84613:  664:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  665:	
    84613:  666:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 86% (fallthrough)
branch  3 taken 14%
branch  4 taken 16% (fallthrough)
branch  5 taken 84%
    31887:  667:				drawntreasure++;
        -:  668:			else
        -:  669:			{
    52726:  670:				temphand[z] = cardDrawn;
        -:  671:				
        -:  672:				//this should just remove the top card (the most recently drawn one).
    52726:  673:				state->handCount[currentPlayer]--; 
    52726:  674:				z++;
        -:  675:			}
        -:  676:		}
        -:  677:      
    73984:  678:		while(z - 1 >= 0)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  679:		{
        -:  680:			// discard all cards in play that have been drawn
    52726:  681:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; 
    52726:  682:			z = z - 1;
        -:  683:		}
        -:  684:		
    10629:  685:		return 0;
        -:  686:}
        -:  687:
        -:  688:// Assignment 2 - refactor card #2: Council Room
function council_room_func called 4 returned 100% blocks executed 100%
        4:  689:int council_room_func(int handPos, struct gameState *state)
        -:  690:{
        -:  691:	int i;
        4:  692:	int currentPlayer = whoseTurn(state);	
call    0 returned 100%
        -:  693:	
        -:  694:	//+4 Cards
       16:  695:	for (i = 1; i < 4; i++) // BUG added!!! = changed i=0 to i=1, which will result in 1 less card drawn.
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       12:  696:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  697:
        -:  698:	//+1 Buy
        4:  699:	state->numBuys++;
        -:  700:	
        -:  701:	//Each other player draws a card
       17:  702:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
       13:  703:		if ( i != currentPlayer )
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        9:  704:			drawCard(i, state);
call    0 returned 100%
        -:  705:
        -:  706:	//put played card in played card pile
        4:  707:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  708:
        4:  709:	return 0;
        -:  710:}
        -:  711:
        -:  712:
        -:  713:// Assignment 2 - refactor card #3: Remodel
function remodel_func called 0 returned 0% blocks executed 0%
    #####:  714:int remodel_func(int choice1, int choice2, int handPos, struct gameState *state)
        -:  715:{
        -:  716:	int i;
        -:  717:	int j;
    #####:  718:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  719:    
    #####:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  723:		return -1;
        -:  724:
    #####:  725:	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  726:
        -:  727:	//discard card from hand
    #####:  728:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  729:
        -:  730:	//discard trashed card
    #####:  731:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  732:	{
    #####:  733:		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  734:	    {
    #####:  735:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  736:			break;
        -:  737:	    }
        -:  738:	}
        -:  739:	
    #####:  740:	return 0;
        -:  741:}
        -:  742:
        -:  743:// Assignment 2 - refactor card #4: Smithy
function smithy_func called 16000 returned 100% blocks executed 100%
    16000:  744:int smithy_func(int handPos, struct gameState *state)
        -:  745:{
        -:  746:	int i;
    16000:  747:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  748:	
        -:  749:	//+3 Cards
    80000:  750:	for (i = 0; i <= 3; i++) // BUG added!!! = changed < to <=, which will result in 1 more card drawn.
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
    64000:  751:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  752:
        -:  753:	//discard card from hand
    16000:  754:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  755:	
    16000:  756:	return 0;
        -:  757:}
        -:  758:
        -:  759:// Assignment 2 - refactor card #5: Village
function village_func called 16000 returned 100% blocks executed 100%
    16000:  760:int village_func(int handPos, struct gameState *state)
        -:  761:{
    16000:  762:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  763:	
        -:  764:	//+1 Card
    16000:  765:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  766:			
        -:  767:	//+2 Actions
    16000:  768:	state->numActions = state->numActions + 22; // BUG added!!! = changed 2 to 22, which will result in +22 actions instead of just 2.
        -:  769:			
        -:  770:	//discard played card from hand
    16000:  771:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  772:
    16000:  773:	return 0;
        -:  774:}
        -:  775:
        -:  776:// cardEffect - for assignment 2 - I refactored 5 of these cards (adventurer, 
function cardEffect called 4 returned 100% blocks executed 10%
        4:  777:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  778:{
        -:  779:  int i;
        -:  780:  int j;
        -:  781:  int k;
        -:  782:  int x;
        -:  783:  int index;
        4:  784:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  785:  int nextPlayer = currentPlayer + 1;
        -:  786:
        4:  787:  int tributeRevealedCards[2] = {-1, -1};
        -:  788:  int temphand[MAX_HAND];// moved above the if statement
        -:  789:
        4:  790:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  791:    nextPlayer = 0;
        -:  792:  }
        -:  793:  
        -:  794:  /* these variables are no longer needed after refactoring
        -:  795:  
        -:  796:    int drawntreasure=0;
        -:  797:	int cardDrawn;
        -:  798:	int z = 0;// this is the counter for the temp hand
        -:  799:	*/
        -:  800:	
        -:  801:  //uses switch to select card and perform actions
        4:  802:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  803:    {
        -:  804:    case adventurer:
        -:  805:	
        4:  806:		adventurer_func(state);
call    0 returned 100%
        -:  807:		
        -:  808:		/* commented out code that is no longer needed due to refactoring
        -:  809:		while(drawntreasure<2)
        -:  810:		{
        -:  811:			//if the deck is empty we need to shuffle discard and add to deck
        -:  812:			if (state->deckCount[currentPlayer] <1)
        -:  813:				shuffle(currentPlayer, state);
        -:  814:		
        -:  815:			drawCard(currentPlayer, state);
        -:  816:		
        -:  817:			//top card of hand is most recently drawn card.
        -:  818:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  819:	
        -:  820:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  821:				drawntreasure++;
        -:  822:			else
        -:  823:			{
        -:  824:				temphand[z]=cardDrawn;
        -:  825:				
        -:  826:				//this should just remove the top card (the most recently drawn one).
        -:  827:				state->handCount[currentPlayer]--; 
        -:  828:				z++;
        -:  829:			}
        -:  830:		}
        -:  831:      
        -:  832:		while(z-1>=0)
        -:  833:		{
        -:  834:			// discard all cards in play that have been drawn
        -:  835:			state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
        -:  836:			z=z-1;
        -:  837:		}
        -:  838:		return 0;
        -:  839:		*/
        -:  840:	
        -:  841:    case council_room:
        -:  842:		
        4:  843:		council_room_func(handPos, state);
call    0 returned 100%
        -:  844:		
        -:  845:		/* commented out code that is no longer needed due to refactoring
        -:  846:		
        -:  847:		//+4 Cards
        -:  848:		  for (i = 0; i < 4; i++)
        -:  849:		{
        -:  850:		  drawCard(currentPlayer, state);
        -:  851:		}
        -:  852:				
        -:  853:		  //+1 Buy
        -:  854:		  state->numBuys++;
        -:  855:				
        -:  856:		  //Each other player draws a card
        -:  857:		  for (i = 0; i < state->numPlayers; i++)
        -:  858:		{
        -:  859:		  if ( i != currentPlayer )
        -:  860:			{
        -:  861:			  drawCard(i, state);
        -:  862:			}
        -:  863:		}
        -:  864:				
        -:  865:		  //put played card in played card pile
        -:  866:		  discardCard(handPos, currentPlayer, state, 0);
        -:  867:				
        -:  868:		  return 0;
        -:  869:		*/
        -:  870:		
        -:  871:    case feast:
        -:  872:      //gain card with cost up to 5
        -:  873:      //Backup hand
       48:  874:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       44:  875:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       44:  876:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  877:      }
        -:  878:      //Backup hand
        -:  879:
        -:  880:      //Update Coins for Buy
        4:  881:      updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        4:  882:      x = 1;//Condition to loop on
       12:  883:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        4:  884:	if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  885:	  if (DEBUG)
        -:  886:	    printf("None of that card left, sorry!\n");
        -:  887:
        -:  888:	  if (DEBUG){
        -:  889:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  890:	  }
        -:  891:	}
        4:  892:	else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  893:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  894:
        -:  895:	  if (DEBUG){
        -:  896:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  897:	  }
        -:  898:	}
        -:  899:	else{
        -:  900:
        -:  901:	  if (DEBUG){
        -:  902:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  903:	  }
        -:  904:
        4:  905:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        4:  906:	  x = 0;//No more buying cards
        -:  907:
        -:  908:	  if (DEBUG){
        -:  909:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  910:	  }
        -:  911:
        -:  912:	}
        -:  913:      }     
        -:  914:
        -:  915:      //Reset Hand
       48:  916:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       44:  917:	state->hand[currentPlayer][i] = temphand[i];
       44:  918:	temphand[i] = -1;
        -:  919:      }
        -:  920:      //Reset Hand
        -:  921:      			
        4:  922:      return 0;
        -:  923:			
        -:  924:    case gardens:
    #####:  925:      return -1;
        -:  926:			
        -:  927:    case mine:
    #####:  928:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  929:
    #####:  930:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  931:	{
    #####:  932:	  return -1;
        -:  933:	}
        -:  934:		
    #####:  935:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  936:	{
    #####:  937:	  return -1;
        -:  938:	}
        -:  939:
    #####:  940:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  941:	{
    #####:  942:	  return -1;
        -:  943:	}
        -:  944:
    #####:  945:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  946:
        -:  947:      //discard card from hand
    #####:  948:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  949:
        -:  950:      //discard trashed card
    #####:  951:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  952:	{
    #####:  953:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  954:	    {
    #####:  955:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  956:	      break;
        -:  957:	    }
        -:  958:	}
        -:  959:			
    #####:  960:      return 0;
        -:  961:			
        -:  962:    case remodel:
        -:  963:	
    #####:  964:		remodel_func(choice1, choice2, handPos, state);
call    0 never executed
        -:  965:		
        -:  966:		/* commented out code that is no longer needed due to refactoring
        -:  967:			
        -:  968:		  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  969:
        -:  970:		  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  971:		{
        -:  972:		  return -1;
        -:  973:		}
        -:  974:
        -:  975:		  gainCard(choice2, state, 0, currentPlayer);
        -:  976:
        -:  977:		  //discard card from hand
        -:  978:		  discardCard(handPos, currentPlayer, state, 0);
        -:  979:
        -:  980:		  //discard trashed card
        -:  981:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:		{
        -:  983:		  if (state->hand[currentPlayer][i] == j)
        -:  984:			{
        -:  985:			  discardCard(i, currentPlayer, state, 0);			
        -:  986:			  break;
        -:  987:			}
        -:  988:		}
        -:  989:
        -:  990:		  return 0;
        -:  991:		*/
        -:  992:		
        -:  993:    case smithy:
        -:  994:	
    #####:  995:		smithy_func(handPos, state);
call    0 never executed
        -:  996:		
        -:  997:		/* commented out code that is no longer needed due to refactoring
        -:  998:			
        -:  999:		  //+3 Cards
        -: 1000:		  for (i = 0; i < 3; i++)
        -: 1001:		{
        -: 1002:		  drawCard(currentPlayer, state);
        -: 1003:		}
        -: 1004:				
        -: 1005:		  //discard card from hand
        -: 1006:		  discardCard(handPos, currentPlayer, state, 0);
        -: 1007:		  return 0;
        -: 1008:		*/
        -: 1009:			
        -: 1010:    case village:
        -: 1011:	
    #####: 1012:		village_func(handPos, state);
call    0 never executed
        -: 1013:		
        -: 1014:		/* commented out code that is no longer needed due to refactoring
        -: 1015:			
        -: 1016:		  //+1 Card
        -: 1017:		  drawCard(currentPlayer, state);
        -: 1018:				
        -: 1019:		  //+2 Actions
        -: 1020:		  state->numActions = state->numActions + 2;
        -: 1021:				
        -: 1022:		  //discard played card from hand
        -: 1023:		  discardCard(handPos, currentPlayer, state, 0);
        -: 1024:		  return 0;
        -: 1025:		*/
        -: 1026:		
        -: 1027:    case baron:
    #####: 1028:      state->numBuys++;//Increase buys by 1!
    #####: 1029:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1030:	int p = 0;//Iterator for hand!
    #####: 1031:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1032:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1033:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1034:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1035:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1036:	    state->discardCount[currentPlayer]++;
    #####: 1037:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1038:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1039:	    }
    #####: 1040:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1041:	    state->handCount[currentPlayer]--;
    #####: 1042:	    card_not_discarded = 0;//Exit the loop
        -: 1043:	  }
    #####: 1044:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1045:	    if(DEBUG) {
        -: 1046:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1047:	      printf("Must gain an estate if there are any\n");
        -: 1048:	    }
    #####: 1049:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1050:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1051:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1052:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1053:		isGameOver(state);
call    0 never executed
        -: 1054:	      }
        -: 1055:	    }
    #####: 1056:	    card_not_discarded = 0;//Exit the loop
        -: 1057:	  }
        -: 1058:			    
        -: 1059:	  else{
    #####: 1060:	    p++;//Next card
        -: 1061:	  }
        -: 1062:	}
        -: 1063:      }
        -: 1064:			    
        -: 1065:      else{
    #####: 1066:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1067:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1068:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1069:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1070:	    isGameOver(state);
call    0 never executed
        -: 1071:	  }
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
        -: 1075:      
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case great_hall:
        -: 1079:      //+1 Card
    #####: 1080:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1081:			
        -: 1082:      //+1 Actions
    #####: 1083:      state->numActions++;
        -: 1084:			
        -: 1085:      //discard card from hand
    #####: 1086:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case minion:
        -: 1090:      //+1 action
    #####: 1091:      state->numActions++;
        -: 1092:			
        -: 1093:      //discard card from hand
    #####: 1094:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1095:			
    #####: 1096:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  state->coins = state->coins + 2;
        -: 1099:	}
        -: 1100:			
    #####: 1101:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1102:	{
        -: 1103:	  //discard hand
    #####: 1104:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1105:	    {
    #####: 1106:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1107:	    }
        -: 1108:				
        -: 1109:	  //draw 4
    #####: 1110:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	    {
    #####: 1112:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1113:	    }
        -: 1114:				
        -: 1115:	  //other players discard hand and redraw if hand size > 4
    #####: 1116:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1119:		{
    #####: 1120:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1121:		    {
        -: 1122:		      //discard hand
    #####: 1123:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1124:			{
    #####: 1125:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1126:			}
        -: 1127:							
        -: 1128:		      //draw 4
    #####: 1129:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1130:			{
    #####: 1131:			  drawCard(i, state);
call    0 never executed
        -: 1132:			}
        -: 1133:		    }
        -: 1134:		}
        -: 1135:	    }
        -: 1136:				
        -: 1137:	}
    #####: 1138:      return 0;
        -: 1139:		
        -: 1140:    case steward:
    #####: 1141:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //+2 cards
    #####: 1144:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1145:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1146:	}
    #####: 1147:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1148:	{
        -: 1149:	  //+2 coins
    #####: 1150:	  state->coins = state->coins + 2;
        -: 1151:	}
        -: 1152:      else
        -: 1153:	{
        -: 1154:	  //trash 2 cards in hand
    #####: 1155:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1157:	}
        -: 1158:			
        -: 1159:      //discard card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case tribute:
    #####: 1164:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1165:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1166:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1167:	  state->deckCount[nextPlayer]--;
        -: 1168:	}
    #####: 1169:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1170:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1171:	  state->discardCount[nextPlayer]--;
        -: 1172:	}
        -: 1173:	else{
        -: 1174:	  //No Card to Reveal
        -: 1175:	  if (DEBUG){
        -: 1176:	    printf("No cards to reveal\n");
        -: 1177:	  }
        -: 1178:	}
        -: 1179:      }
        -: 1180:	    
        -: 1181:      else{
    #####: 1182:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1183:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1184:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1185:	    state->deckCount[nextPlayer]++;
    #####: 1186:	    state->discard[nextPlayer][i] = -1;
    #####: 1187:	    state->discardCount[nextPlayer]--;
        -: 1188:	  }
        -: 1189:			    
    #####: 1190:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1191:	} 
    #####: 1192:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1193:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1194:	state->deckCount[nextPlayer]--;
    #####: 1195:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1196:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:	state->deckCount[nextPlayer]--;
        -: 1198:      }    
        -: 1199:		       
    #####: 1200:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1201:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1202:	state->playedCardCount++;
    #####: 1203:	tributeRevealedCards[1] = -1;
        -: 1204:      }
        -: 1205:
    #####: 1206:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1207:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1208:	  state->coins += 2;
        -: 1209:	}
        -: 1210:		    
    #####: 1211:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1212:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1213:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1214:	}
        -: 1215:	else{//Action Card
    #####: 1216:	  state->numActions = state->numActions + 2;
        -: 1217:	}
        -: 1218:      }
        -: 1219:	    
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case ambassador:
    #####: 1223:      j = 0;		//used to check if player has enough cards to discard
        -: 1224:
    #####: 1225:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1226:	{
    #####: 1227:	  return -1;				
        -: 1228:	}
        -: 1229:
    #####: 1230:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
    #####: 1232:	  return -1;
        -: 1233:	}
        -: 1234:
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1238:	    {
    #####: 1239:	      j++;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1243:	{
    #####: 1244:	  return -1;				
        -: 1245:	}
        -: 1246:
        -: 1247:      if (DEBUG) 
        -: 1248:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1249:
        -: 1250:      //increase supply count for choosen card by amount being discarded
    #####: 1251:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1252:			
        -: 1253:      //each other player gains a copy of revealed card
    #####: 1254:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1255:	{
    #####: 1256:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1257:	    {
    #####: 1258:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1259:	    }
        -: 1260:	}
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1264:
        -: 1265:      //trash copies of cards returned to supply
    #####: 1266:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1267:	{
    #####: 1268:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1269:	    {
    #####: 1270:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1271:		{
    #####: 1272:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1273:		  break;
        -: 1274:		}
        -: 1275:	    }
        -: 1276:	}			
        -: 1277:
    #####: 1278:      return 0;
        -: 1279:		
        -: 1280:    case cutpurse:
        -: 1281:
    #####: 1282:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1283:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1284:	{
    #####: 1285:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1286:	    {
    #####: 1287:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1288:		{
    #####: 1289:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1290:		    {
    #####: 1291:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1292:		      break;
        -: 1293:		    }
    #####: 1294:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1295:		    {
    #####: 1296:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1297:			{
        -: 1298:			  if (DEBUG)
        -: 1299:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1300:			}	
    #####: 1301:		      break;
        -: 1302:		    }		
        -: 1303:		}
        -: 1304:					
        -: 1305:	    }
        -: 1306:				
        -: 1307:	}				
        -: 1308:
        -: 1309:      //discard played card from hand
    #####: 1310:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1311:
    #####: 1312:      return 0;
        -: 1313:
        -: 1314:		
        -: 1315:    case embargo: 
        -: 1316:      //+2 Coins
    #####: 1317:      state->coins = state->coins + 2;
        -: 1318:			
        -: 1319:      //see if selected pile is in play
    #####: 1320:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1321:	{
    #####: 1322:	  return -1;
        -: 1323:	}
        -: 1324:			
        -: 1325:      //add embargo token to selected supply pile
    #####: 1326:      state->embargoTokens[choice1]++;
        -: 1327:			
        -: 1328:      //trash card
    #####: 1329:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1330:      return 0;
        -: 1331:		
        -: 1332:    case outpost:
        -: 1333:      //set outpost flag
    #####: 1334:      state->outpostPlayed++;
        -: 1335:			
        -: 1336:      //discard card
    #####: 1337:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1338:      return 0;
        -: 1339:		
        -: 1340:    case salvager:
        -: 1341:      //+1 buy
    #####: 1342:      state->numBuys++;
        -: 1343:			
    #####: 1344:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1345:	{
        -: 1346:	  //gain coins equal to trashed card
    #####: 1347:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1348:	  //trash card
    #####: 1349:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1350:	}
        -: 1351:			
        -: 1352:      //discard card
    #####: 1353:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1354:      return 0;
        -: 1355:		
        -: 1356:    case sea_hag:
    #####: 1357:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1358:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1359:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1360:	  state->discardCount[i]++;
    #####: 1361:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1362:	}
        -: 1363:      }
    #####: 1364:      return 0;
        -: 1365:		
        -: 1366:    case treasure_map:
        -: 1367:      //search hand for another treasure_map
    #####: 1368:      index = -1;
    #####: 1369:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1370:	{
    #####: 1371:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1372:	    {
    #####: 1373:	      index = i;
    #####: 1374:	      break;
        -: 1375:	    }
        -: 1376:	}
    #####: 1377:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1378:	{
        -: 1379:	  //trash both treasure cards
    #####: 1380:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1381:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1382:
        -: 1383:	  //gain 4 Gold cards
    #####: 1384:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1385:	    {
    #####: 1386:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1387:	    }
        -: 1388:				
        -: 1389:	  //return success
    #####: 1390:	  return 1;
        -: 1391:	}
        -: 1392:			
        -: 1393:      //no second treasure_map found in hand
    #####: 1394:      return -1;
        -: 1395:    }
        -: 1396:	
    #####: 1397:  return -1;
        -: 1398:}
        -: 1399:
function discardCard called 32004 returned 100% blocks executed 89%
    32004: 1400:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1401:{
        -: 1402:	
        -: 1403:  //if card is not trashed, added to Played pile 
    32004: 1404:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1405:    {
        -: 1406:      //add card to played pile
    32004: 1407:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    32004: 1408:      state->playedCardCount++;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //set played card to -1
    32004: 1412:  state->hand[currentPlayer][handPos] = -1;
        -: 1413:	
        -: 1414:  //remove card from player's hand
    32004: 1415:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1416:    {
        -: 1417:      //reduce number of cards in hand
    16001: 1418:      state->handCount[currentPlayer]--;
        -: 1419:    }
    16003: 1420:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1421:    {
        -: 1422:      //reduce number of cards in hand
    #####: 1423:      state->handCount[currentPlayer]--;
        -: 1424:    }
        -: 1425:  else 	
        -: 1426:    {
        -: 1427:      //replace discarded card with last card in hand
    16003: 1428:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1429:      //set last card to -1
    16003: 1430:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1431:      //reduce number of cards in hand
    16003: 1432:      state->handCount[currentPlayer]--;
        -: 1433:    }
        -: 1434:	
    32004: 1435:  return 0;
        -: 1436:}
        -: 1437:
function gainCard called 9 returned 100% blocks executed 80%
        9: 1438:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1439:{
        -: 1440:  //Note: supplyPos is enum of choosen card
        -: 1441:	
        -: 1442:  //check if supply pile is empty (0) or card is not used in game (-1)
        9: 1443:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1444:    {
    #####: 1445:      return -1;
        -: 1446:    }
        -: 1447:	
        -: 1448:  //added card for [whoseTurn] current player:
        -: 1449:  // toFlag = 0 : add to discard
        -: 1450:  // toFlag = 1 : add to deck
        -: 1451:  // toFlag = 2 : add to hand
        -: 1452:
        9: 1453:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1454:    {
    #####: 1455:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1456:      state->deckCount[player]++;
        -: 1457:    }
        9: 1458:  else if (toFlag == 2)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -: 1459:    {
        5: 1460:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1461:      state->handCount[player]++;
        -: 1462:    }
        -: 1463:  else
        -: 1464:    {
        4: 1465:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1466:      state->discardCount[player]++;
        -: 1467:    }
        -: 1468:	
        -: 1469:  //decrease number in supply pile
        9: 1470:  state->supplyCount[supplyPos]--;
        -: 1471:	 
        9: 1472:  return 0;
        -: 1473:}
        -: 1474:
function updateCoins called 42633 returned 100% blocks executed 82%
    42633: 1475:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1476:{
        -: 1477:  int i;
        -: 1478:	
        -: 1479:  //reset coin count
    42633: 1480:  state->coins = 0;
        -: 1481:
        -: 1482:  //add coins for each Treasure card in player's hand
   255818: 1483:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1484:    {
   213185: 1485:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1486:	{
   171515: 1487:	  state->coins += 1;
        -: 1488:	}
    41670: 1489:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1490:	{
    #####: 1491:	  state->coins += 2;
        -: 1492:	}
    41670: 1493:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1494:	{
    #####: 1495:	  state->coins += 3;
        -: 1496:	}	
        -: 1497:    }	
        -: 1498:
        -: 1499:  //add bonus
    42633: 1500:  state->coins += bonus;
        -: 1501:
    42633: 1502:  return 0;
        -: 1503:}
        -: 1504:
        -: 1505:
        -: 1506://end of dominion.c
        -: 1507: